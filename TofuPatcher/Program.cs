using System.Collections.Frozen;
using System.Diagnostics;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace TofuPatcher
{
    public class Program
    {
        static Lazy<TofuPatcherSettings> _Settings = null!;
        static TofuPatcherSettings Settings => _Settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline
                .Instance.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "TofuPatcherSettings",
                    path: "TofuPatcherSettings.json",
                    out _Settings
                )
                .SetTypicalOpen(GameRelease.SkyrimSE, "TofuPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var excludeMods = Settings.ExcludeMods.ToFrozenSet();

            var transforms = new List<Func<string?, string?>> { TextUtil.ToAscii };

            if (Settings.TrimWhitespace)
            {
                transforms.Add(str => str?.Trim());
            }

            var namedPatcher = new NamedRecordTextPatcher(transforms);
            var infoPatcher = new DialogueInfoTextPatcher(transforms);

            var pipeline = new TextPatcherPipeline(
                state.PatchMod,
                context => !excludeMods.Contains(context.ModKey)
            );

            var stopwatch = new Stopwatch();
            stopwatch.Start();

            var namedRecords = state.LoadOrder.PriorityOrder.WinningContextOverrides<
                ISkyrimMod,
                ISkyrimModGetter,
                INamed,
                INamedGetter
            >(state.LinkCache);

            pipeline.PatchRecords(namedPatcher, namedRecords);

            var dialogueInfos = state
                .LoadOrder.PriorityOrder.DialogResponses()
                .WinningContextOverrides(state.LinkCache);
            pipeline.PatchRecords(infoPatcher, dialogueInfos);

            stopwatch.Stop();
            Console.WriteLine($"Patcher took {stopwatch.Elapsed.TotalSeconds}s");
            Console.WriteLine($"Patched {pipeline.PatchedCount} total records");
        }
    }
}
